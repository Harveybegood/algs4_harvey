/*
      Write a Point2D client that takes an integer value N from the command line, generates N random points in the unit square, and
      computes the distance separating the closest pair of points.
*/

``` Java
import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;

import java.util.Arrays;

public class ex_1_2_1 {
    public static void main(String[] args){
        int n = Integer.parseInt(args[0]);
        Point2D[] points = new Point2D[n];
        drawCreatePoints(points);
        StdOut.printf("The shortest distance is: %.3f",computeDistance(points));
    }
    public static void drawCreatePoints(Point2D[] points){
        StdDraw.setCanvasSize(1024,512);
        StdDraw.setPenRadius(.015);
        StdDraw.setXscale(0,1);
        StdDraw.setYscale(0,1);
        for(int i = 0; i < points.length; i++){
            double pointX = StdRandom.uniform();
            double pointY = StdRandom.uniform();
            Point2D point = new Point2D(pointX,pointY);
            StdDraw.point(point.x(), point.y());
            points[i] = point;
        }
    }
    public static double computeDistance(Point2D[] points){
        double shortestDistance = Double.MAX_VALUE;
        double currentDistance = Double.MAX_VALUE;
        Arrays.sort(points, points[0].distanceToOrder());
        for(int i = 1; i < points.length; i++){
            currentDistance = points[i].distanceTo(points[i-1]);
            if(currentDistance < shortestDistance){
                shortestDistance = currentDistance;
            }
        }
        return shortestDistance;
    }
}


```
A copy from https://github.com/reneargento/algorithms-sedgewick-wayne/blob/master/src/chapter1/section2/Exercise1.java
