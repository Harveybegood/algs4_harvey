package Chapter3_5_Applications;

import edu.princeton.cs.algs4.*;

/*
*   Dictionary. Study the performance of a client like LookupCSV in a scenario where performance matters. Specifically, design a
*   query-generation scenario instead of taking commands from standard input, and run performance tests for large inputs and large
*   numbers of queries.
*
* */
public class Ex32_Dictionary {
    // will use the input files UPC.csv, as there is size reaching to 46MB

    public void queryGeneration(String largeInputs, int largeNumberOfQueries, int key, int value){
        In in = new In(largeInputs);
        ST<String, String> st = new ST<>();
        SET<String> keyForQuery = new SET<>();
        while (!in.hasNextLine()){
            String line = in.readLine();
            String[] tokens = line.split(",");
            st.put(tokens[key], tokens[value]);
            keyForQuery.add(tokens[key]);
        }
        // queries will be generated by iteration
        for (int i = 0; i < largeNumberOfQueries; i++){
            for (String query : st.keys()){
                if (st.contains(query)){
                    st.get(query);
                }
            }
        }
    }

    public void runPerformance(String largeInputs, int key, int value){
        StdOut.printf("%15s %8s\n", "numberOfQueries", "timeCost");
        int[] largeNumberOfQueries = {1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000};
        for (int i = 0; i < 7; i++){
            Stopwatch timer = new Stopwatch();
            queryGeneration(largeInputs, largeNumberOfQueries[i], key, value);
            double timeCost = timer.elapsedTime();
            StdOut.printf("%15d %8.2f\n", largeNumberOfQueries[i], timeCost);
        }

    }

    public static void main(String[] args) {
        Ex32_Dictionary dictionary = new Ex32_Dictionary();
        String largeInputs = args[0];
        int keyIndex = Integer.parseInt(args[1]);
        int valueIndex = Integer.parseInt(args[2]);
        dictionary.runPerformance(largeInputs, keyIndex, valueIndex);
    }
}

/*
*       numberOfQueries timeCost
                   1000     0.06
                  10000     0.01
                 100000     0.04
                1000000     0.01
               10000000     0.07
              100000000     0.21
             1000000000     1.96

*
*
*
* */